local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local userInputService = game:GetService("UserInputService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local scrollFrame, playerMenu

-- Initialize variables
local isFlying = false
local isNoClipping = false
local flightSpeed = 50
local walkingSpeed = 16
local targetPlayer = nil
local speedSliderValue = flightSpeed  -- Default flight speed
local flightHeight = 50
local isInvisible = false
local isSpeedToggled = false

-- UI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local menuFrame = Instance.new("Frame")
menuFrame.Size = UDim2.new(0, 200, 0, 400)
menuFrame.Position = UDim2.new(0, 10, 0, 100)
menuFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
menuFrame.BackgroundTransparency = 0.5
menuFrame.Parent = screenGui

-- Scrollable Frame Setup
scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(0, 200, 0, 300)
scrollFrame.Position = UDim2.new(0, 0, 0, 70)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Initially no items
scrollFrame.ScrollBarThickness = 12
scrollFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
scrollFrame.Parent = menuFrame

-- Toggle flight button
local flightButton = Instance.new("TextButton")
flightButton.Size = UDim2.new(0, 200, 0, 50)
flightButton.Position = UDim2.new(0, 0, 0, 10)
flightButton.Text = "Toggle Flight"
flightButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
flightButton.Parent = menuFrame

-- Toggle No-Clip button
local noClipButton = Instance.new("TextButton")
noClipButton.Size = UDim2.new(0, 200, 0, 50)
noClipButton.Position = UDim2.new(0, 0, 0, 70)
noClipButton.Text = "Toggle No-Clip"
noClipButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
noClipButton.Parent = menuFrame

-- Teleport button
local tpButton = Instance.new("TextButton")
tpButton.Size = UDim2.new(0, 200, 0, 50)
tpButton.Position = UDim2.new(0, 0, 0, 130)
tpButton.Text = "Teleport to Player"
tpButton.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
tpButton.Parent = menuFrame

-- Toggle Invisibility button
local invisibilityButton = Instance.new("TextButton")
invisibilityButton.Size = UDim2.new(0, 200, 0, 50)
invisibilityButton.Position = UDim2.new(0, 0, 0, 190)
invisibilityButton.Text = "Toggle Invisibility"
invisibilityButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
invisibilityButton.Parent = menuFrame

-- Speed Control button
local speedButton = Instance.new("TextButton")
speedButton.Size = UDim2.new(0, 200, 0, 50)
speedButton.Position = UDim2.new(0, 0, 0, 250)
speedButton.Text = "Toggle Speed"
speedButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
speedButton.Parent = menuFrame

-- Function to toggle flight mode
local function toggleFlight()
    isFlying = not isFlying
    if isFlying then
        -- Enable flight with forward/backward/up/down controls
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
        bodyVelocity.Velocity = Vector3.new(0, flightSpeed, 0)
        bodyVelocity.Parent = character.HumanoidRootPart

        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)
        bodyGyro.CFrame = character.HumanoidRootPart.CFrame
        bodyGyro.Parent = character.HumanoidRootPart
    else
        -- Disable flight
        character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity"):Destroy()
        character.HumanoidRootPart:FindFirstChildOfClass("BodyGyro"):Destroy()
    end
end

-- Function to toggle No-Clip mode
local function toggleNoClip()
    isNoClipping = not isNoClipping
    if isNoClipping then
        -- Make the player able to pass through parts (no collision)
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    else
        -- Restore collision to all parts
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

-- Function to toggle Invisibility
local function toggleInvisibility()
    isInvisible = not isInvisible
    if isInvisible then
        -- Make the character invisible
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.Transparency = 1
            end
        end
    else
        -- Make the character visible
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.Transparency = 0
            end
        end
    end
end

-- Function to toggle Speed
local function toggleSpeed()
    isSpeedToggled = not isSpeedToggled
    if isSpeedToggled then
        -- Set walking speed to the custom flight speed
        walkingSpeed = flightSpeed
        character.Humanoid.WalkSpeed = walkingSpeed
    else
        -- Reset to normal walking speed
        walkingSpeed = 16
        character.Humanoid.WalkSpeed = walkingSpeed
    end
end

-- Function to teleport to another player
local function teleportToPlayer()
    if targetPlayer then
        character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
    else
        print("No player selected to teleport to.")
    end
end

-- Function to update the speed slider value
local function updateSpeed()
    local speedValue = tonumber(speedSlider.Text)
    if speedValue then
        flightSpeed = speedValue
        speedSlider.Text = "Speed: " .. flightSpeed
    end
end

-- Listen for the buttons to be clicked
flightButton.MouseButton1Click:Connect(toggleFlight)
noClipButton.MouseButton1Click:Connect(toggleNoClip)
invisibilityButton.MouseButton1Click:Connect(toggleInvisibility)
speedButton.MouseButton1Click:Connect(toggleSpeed)

-- Function to create a player button in the player menu
local function createPlayerButton(plr)
    local playerButton = Instance.new("TextButton")
    playerButton.Size = UDim2.new(0, 180, 0, 30)
    playerButton.Text = "Teleport to " .. plr.Name
    playerButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    playerButton.Parent = scrollFrame
    playerButton.MouseButton1Click:Connect(function()
        targetPlayer = plr
        print("Target player set to: " .. plr.Name)
    end)
end

-- Show player menu only when Teleport button is clicked
tpButton.MouseButton1Click:Connect(function()
    -- Clear previous player buttons
    for _, child in pairs(scrollFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end

    -- Create a button for each player in the game
    for _, plr in pairs(game.Players:GetPlayers()) do
        if plr ~= player then
            createPlayerButton(plr)
        end
    end

    -- Show the scrollFrame
    scrollFrame.Visible = true
end)

-- Hide player menu after teleport or other actions
game.Players.PlayerRemoving:Connect(function(plr)
    if plr == targetPlayer then
        scrollFrame.Visible = false
    end
end)

-- Set initial visibility to false for scrollFrame
scrollFrame.Visible = false

-- Function to handle flight controls (speed changes and position adjustments)
game:GetService("RunService").Heartbeat:Connect(function()
    if isFlying then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = true  -- Disable standing on the ground while flying
        end
        -- Apply flight speed and control the movement
        local moveDirection = Vector3.new()
        if userInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + character.HumanoidRootPart.CFrame.LookVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - character.HumanoidRootPart.CFrame.LookVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - character.HumanoidRootPart.CFrame.RightVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + character.HumanoidRootPart.CFrame.RightVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + Vector3.new(0, 1, 0)  -- Going up
        end
        if userInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDirection = moveDirection - Vector3.new(0, 1, 0)  -- Going down
        end
        character.HumanoidRootPart.Velocity = moveDirection * flightSpeed
    else
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false  -- Re-enable standing on the ground
            humanoid.WalkSpeed = walkingSpeed
        end
    end
end)
